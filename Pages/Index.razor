@page "/"
@inject HttpService http
@inject IJSRuntime js

<div class="main-container">
    <div class="login-area">
        <p>
            <MatTextField
                id='email-field'
                @bind-Value="@Email" 
                Label="Email" 
                Icon="email"></MatTextField>
        </p>

        <label style="color: red;">
            @PasswordError
        </label>
        <p>
            <MatTextField 
                id='pass-field'
                @bind-Value="@Password"
                OnKeyUp="@OnPassChanged"
                Label="Senha" 
                Type="password"
                Icon="lock"></MatTextField>
        </p>

        @if (InRegister)
        {
            <label style="color: red;">
                @RepeatPassError
            </label>
            <p>
                <MatTextField 
                    id='repeat-pass-field'
                    @bind-Value="@RepeatPassword"
                    OnKeyUp="@OnPassChanged"
                    Label="Repita sua Senha" 
                    Type="password"
                    Icon="lock"></MatTextField>
            </p>
            <label style="color: red;">@CpfError</label>
            <p>
                <MatTextField
                    id='cpf-field'
                    @bind-Value="@CPF" 
                    Icon="security"
                    OnKeyUp="@OnCpfChagend"
                    Label="CPF">
                    </MatTextField>
            </p>
            <p>
                <MatTextField
                    id='cep-field'
                    @bind-Value="@CEP"
                    Icon="home"
                    OnKeyUp="@OnCepChanged"
                    Label="CEP">
                    </MatTextField>
            </p>
            <p>
                <MatTextField 
                    @bind-Value="@Street" 
                    ReadOnly="true"
                    Label="Rua">
                    </MatTextField>
            </p>
            <p>
                <MatTextField 
                    @bind-Value="@District" 
                    ReadOnly="true"
                    Label="Bairro">
                    </MatTextField>
            </p>
            <p>
                <MatTextField 
                    @bind-Value="@City" 
                    ReadOnly="true"
                    Label="Cidade">
                    </MatTextField>
            </p>
            <p>
                <MatTextField 
                    @bind-Value="@State"
                    ReadOnly="true"
                    Label="Estado" >
                    </MatTextField>
            </p>
        }

        <div class="buttons">
            @if (InRegister)
            {
                <MatButton Raised="true" OnClick="@OpenLogin">Voltar</MatButton>
                <MatButton Raised="true" OnClick="@Cadastrar">Cadastrar</MatButton>
            }
            else
            {
                <MatButton Raised="true">Login</MatButton>
                <MatButton Raised="true" OnClick="@OpenRegister">Novo aqui?</MatButton>
            }
        </div>
    </div>
</div>

@code
{
    public string Email { get; set; }
    public string Password { get; set; }
    public string RepeatPassword { get; set; }
    public string RepeatPassError { get; set; }
    public string PasswordError { get; set; }
    public string CpfError { get; set; }
    public string Name { get; set; }
    public string CPF { get; set; }
    public string CEP { get; set; }
    public string Street { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    public string District { get; set; }

    public bool InRegister { get; set; } = false;

    public async Task OnCepChanged(KeyboardEventArgs e)
    {
        var cep = await js.InvokeAsync<string>("window.getCep", new object[0]);
        CEP cepData = await http.GetCepInformation(cep);
        if (cepData == null)
            return;
        
        this.Street = cepData.Logradouro;
        this.City = cepData.Localidade;
        this.State = cepData.Uf;
        this.District = cepData.Bairro;
        StateHasChanged();
    }

    public async Task OnCpfChagend(KeyboardEventArgs e)
    {
        var cpf = await js.InvokeAsync<string>("window.getCpf", new object[0]);
        bool isValid = await http.CpfValidation(cpf);
        if (isValid)
        {
            CpfError = "";
        }
        else
        {
            CpfError = "CPF é inválido";
        }
        StateHasChanged();
    }

    public async void OnPassChanged(KeyboardEventArgs e)
    {
        if (!InRegister)
            return;
        
        var isSame = await js.InvokeAsync<bool>(
            "window.passValidation", new object[0]);
        
        RepeatPassError = isSame ? "" : "As senhas devem ser iguais";
        StateHasChanged();
    }

    public async void Cadastrar()
    {
        Usuario usuario = new Usuario();
        var cep = await js.InvokeAsync<string>(
            "window.getCep", new object[0]);
        cep = cep.Replace(".", "");
        cep = cep.Replace("-", "");
        usuario.Cep = int.Parse(cep);

        usuario.Cpf = 2;
        usuario.Email = "edmail@mail.com";
        usuario.Senha = "elefante";

        await http.RegisterUser(usuario);
    }

    public void OpenRegister()
    {
        InRegister = true;
        StateHasChanged();
    }

    public void OpenLogin()
    {
        InRegister = false;
        StateHasChanged();
    }
}